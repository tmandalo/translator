"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
"""

import logging
import sys
from typing import Optional, Callable
from pathlib import Path
from datetime import datetime

from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeRemainingColumn, TaskProgressColumn
from rich.logging import RichHandler
from rich.text import Text
from rich.panel import Panel
from rich.table import Table

from config import config


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    COLORS = {
        'DEBUG': 'cyan',
        'INFO': 'green',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'bold red'
    }
    
    def format(self, record):
        log_color = self.COLORS.get(record.levelname, 'white')
        record.levelname = f"[{log_color}]{record.levelname}[/{log_color}]"
        return super().format(record)


def setup_logging(log_level: str = None) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger
    """
    if log_level is None:
        log_level = config.log_level
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å Rich
    console = Console()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π
    log_file = log_dir / f"translation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –°–æ–∑–¥–∞–µ–º Rich handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    rich_handler = RichHandler(
        console=console,
        rich_tracebacks=True,
        show_time=True,
        show_level=True,
        show_path=False
    )
    rich_handler.setLevel(getattr(logging, log_level.upper()))
    
    # –°–æ–∑–¥–∞–µ–º file handler
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    console_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%H:%M:%S'
    )
    
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    rich_handler.setFormatter(console_formatter)
    file_handler.setFormatter(file_formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º handlers
    root_logger.addHandler(rich_handler)
    root_logger.addHandler(file_handler)
    
    return root_logger


class TranslationProgress:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    def __init__(self, total_chunks: int):
        self.console = Console()
        self.total_chunks = total_chunks
        self.progress = None
        self.task_id = None
        self.successful = 0
        self.failed = 0
        self.start_time = None
        
    def __enter__(self):
        self.progress = Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]–ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç..."),
            BarColumn(),
            TaskProgressColumn(),
            TextColumn("‚Ä¢"),
            TextColumn("[green]–£—Å–ø–µ—à–Ω–æ: {task.fields[successful]}"),
            TextColumn("[red]–û—à–∏–±–æ–∫: {task.fields[failed]}"),
            TextColumn("‚Ä¢"),
            TimeRemainingColumn(),
            console=self.console,
            transient=False
        )
        
        self.progress.start()
        self.task_id = self.progress.add_task(
            "–ü–µ—Ä–µ–≤–æ–¥...",
            total=self.total_chunks,
            successful=0,
            failed=0
        )
        
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.progress:
            self.progress.stop()
    
    def update(self, completed: int, total: int, success: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        if success:
            self.successful += 1
        else:
            self.failed += 1
        
        if self.progress and self.task_id is not None:
            self.progress.update(
                self.task_id,
                completed=completed,
                successful=self.successful,
                failed=self.failed
            )
    
    def show_summary(self, stats: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        table = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
        table.add_row("–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤", str(stats.get('total_chunks', 0)))
        table.add_row("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", str(stats.get('successful_chunks', 0)))
        table.add_row("–û—à–∏–±–æ–∫", str(stats.get('failed_chunks', 0)))
        table.add_row("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{stats.get('success_rate', 0)*100:.1f}%")
        table.add_row("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{stats.get('total_processing_time', 0):.1f}—Å")
        table.add_row("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", str(stats.get('total_tokens_used', 0)))
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        panel = Panel(table, title="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω", border_style="green")
        
        self.console.print()
        self.console.print(panel)


class TranslationLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.console = Console()
    
    def log_start(self, input_file: str, output_file: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        self.console.print()
        self.console.print(Panel(
            f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            f"üìÑ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}\n"
            f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}",
            title="üöÄ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            border_style="blue"
        ))
        
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥: {input_file} -> {output_file}")
    
    def log_document_stats(self, stats: dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        message_parts = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
            f"‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {stats.get('total_elements', 0)}",
            f"‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {stats.get('paragraphs', 0)}",
            f"‚Ä¢ –¢–∞–±–ª–∏—Ü: {stats.get('tables', 0)}",
            f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats.get('images', 0)}",
            f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {stats.get('total_characters', 0)}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞: {stats.get('average_element_size', 0):.0f}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats.get('images', 0) > 0:
            message_parts.append("\nüñºÔ∏è –î–µ—Ç–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            
            if 'formats' in stats:
                formats_info = ", ".join([f"{fmt}: {count}" for fmt, count in stats['formats'].items()])
                message_parts.append(f"‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: {formats_info}")
            
            if 'inline_images' in stats:
                message_parts.append(f"‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö: {stats.get('inline_images', 0)}")
                
            if 'floating_images' in stats:
                message_parts.append(f"‚Ä¢ –ü–ª–∞–≤–∞—é—â–∏—Ö: {stats.get('floating_images', 0)}")
        
        self.console.print()
        self.console.print(Panel(
            "\n".join(message_parts),
            title="üìã –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            border_style="cyan"
        ))
        
        self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {stats}")
    
    def log_chunk_stats(self, stats: dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –±–ª–æ–∫–∏"""
        self.console.print()
        self.console.print(Panel(
            f"üî® –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –±–ª–æ–∫–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {stats.get('total_chunks', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: {stats.get('average_chunk_size', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–∫: {stats.get('max_chunk_size', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–∫: {stats.get('min_chunk_size', 0)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ü–æ–ª–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {stats.get('complete_paragraphs', 0)}",
            title="üß© –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É",
            border_style="yellow"
        ))
        
        self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–æ–≤: {stats}")
    
    def log_error(self, error: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        self.console.print()
        self.console.print(Panel(
            f"‚ùå –û—à–∏–±–∫–∞: {error}",
            title="üí• –û—à–∏–±–∫–∞",
            border_style="red"
        ))
        
        self.logger.error(error)
    
    def log_success(self, output_file: str, xml_file: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        message = f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {output_file}"
        
        if xml_file:
            message += f"\nüìÑ XML —Ñ–∞–π–ª: {xml_file}"
        
        self.console.print()
        self.console.print(Panel(
            message,
            title="üéâ –£—Å–ø–µ—Ö",
            border_style="green"
        ))
        
        self.logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}") 