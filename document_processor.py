"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ .docx –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import re
import traceback
import xml.etree.ElementTree as ET
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from pathlib import Path
import time

from docx import Document
from docx.shared import Inches
from docx.enum.style import WD_STYLE_TYPE
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.text.paragraph import Paragraph
from docx.text.run import Run
from docx.table import Table

from improved_image_processor import ImprovedImageProcessor, ImageElement, ImageInfo
from image_adapter import ImageAdapter
from formatting_processor import FormattingProcessor
from translator import DocumentTranslator, TranslationResult


class TranslationProgress:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    def __init__(self, total_items):
        self.total_items = total_items
        self.start_time = time.time()
        
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        pass
        
    def update(self, current_item, total_items, show_details=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        elapsed = time.time() - self.start_time
        percentage = (current_item / total_items) * 100 if total_items > 0 else 0
        
        if show_details:
            print(f"    –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_item}/{total_items} ({percentage:.1f}%) - {elapsed:.1f}—Å")


@dataclass
class DocumentElement:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    element_type: str  # 'paragraph', 'table', 'header', 'footer', 'image'
    content: str
    original_element: Any
    index: int
    style: Optional[str] = None
    formatting: Optional[Dict[str, Any]] = None
    image_element: Optional[ImageElement] = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏


class DocumentProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ .docx –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.document = None
        self.elements: List[DocumentElement] = []
        self.improved_image_processor = ImprovedImageProcessor()
        self.images: List[ImageElement] = []
        self.file_path = None
        self.formatting_processor = FormattingProcessor()
        self.translator = DocumentTranslator()
        
        # –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô
        self.position_tracker = {
            'extraction_stage': {},      # –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ XML
            'validation_stage': {},      # –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            'positioning_stage': {},     # –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            'insertion_stage': {},       # –ü–æ–∑–∏—Ü–∏–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            'position_history': [],      # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π
            'tracking_enabled': True
        }
    
    def load_document(self, file_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ .docx —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            self.document = Document(file_path)
            self.file_path = file_path
            self.elements = []
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def process_and_translate(self) -> Optional[Document]:
        """
        –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω—É—é —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
        """
        if not self.document:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return None

        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        print("üîç –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö...")
        image_infos = self.improved_image_processor.extract_images_from_docx(self.file_path)
        self.images = ImageAdapter.convert_list_to_image_elements(image_infos)
        
        images_by_paragraph = {}
        for img in self.images:
            if img.paragraph_index is not None:
                if img.paragraph_index not in images_by_paragraph:
                    images_by_paragraph[img.paragraph_index] = []
                images_by_paragraph[img.paragraph_index].append(img)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ {len(images_by_paragraph)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º.")

        # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, –ø—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        new_doc = Document()
        
        # 3. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ö–ê–ñ–î–û–ú–£ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("\nüîç –®–∞–≥ 2: –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        total_paragraphs = len(self.document.paragraphs)
        
        with TranslationProgress(total_paragraphs) as progress:
            for i, p in enumerate(self.document.paragraphs):
                
                # A. –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ü–ï–†–ï–î —ç—Ç–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º
                if i in images_by_paragraph:
                    for image_element in sorted(images_by_paragraph[i], key=lambda img: img.image_id):
                        self._insert_image_with_smart_positioning(new_doc, image_element, i)
                        print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_element.image_id} –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º {i}")

                # B. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                if p.text.strip():
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º
                    print(f"  –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}/{total_paragraphs}...")
                    result = self.translator.api_translator.translate_text(p.text)
                    if result.success:
                        para_formatting = self._extract_paragraph_formatting(p)
                        new_para = new_doc.add_paragraph()
                        self._apply_advanced_formatting(new_para, p.text, result.translated_text, para_formatting)
                    else:
                        new_doc.add_paragraph(f"[–û–®–ò–ë–ö–ê –ü–ï–†–ï–í–û–î–ê] {p.text}")
                else:
                    # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø—É—Å—Ç–æ–π - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å—Ç–∫–∏
                    new_doc.add_paragraph()
                
                progress.update(i + 1, total_paragraphs, True)
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–∫—É—é –∂–µ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

        print("\n‚úÖ –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return new_doc
    
    def _validate_and_correct_image_positions(self, images: List[ImageElement]) -> List[ImageElement]:
        """
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            images: –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        """
        if not images or not self.document:
            return images
            
        total_paragraphs = len(self.document.paragraphs)
        print(f"üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Ç–∏–≤ {total_paragraphs} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        significant_paragraphs = []
        for i, para in enumerate(self.document.paragraphs):
            has_text = para.text.strip()
            has_images = any(run._element.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing') for run in para.runs)
            
            if has_text or has_images:
                significant_paragraphs.append({
                    'index': i,
                    'text_preview': para.text[:50] + '...' if len(para.text) > 50 else para.text,
                    'has_text': has_text,
                    'has_images': has_images
                })
        
        print(f"üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ù–∞–π–¥–µ–Ω–æ {len(significant_paragraphs)} –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        stats = {
            'valid_positions': 0,
            'invalid_positions': 0,
            'corrected_positions': 0,
            'distributed_positions': 0,
            'end_positions': 0
        }
        
        corrected_images = []
        
        for img_idx, image in enumerate(images):
            original_position = image.paragraph_index
            
            # === –≠–¢–ê–ü 1: –ë–ê–ó–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø ===
            if image.paragraph_index is None:
                print(f"‚ùì –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏–∏")
                stats['invalid_positions'] += 1
            elif image.paragraph_index < 0:
                print(f"‚ö†Ô∏è  –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é {image.paragraph_index}")
                image.paragraph_index = None
                stats['invalid_positions'] += 1
            elif image.paragraph_index >= total_paragraphs:
                print(f"‚ö†Ô∏è  –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏—é {image.paragraph_index} –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ ({total_paragraphs})")
                image.paragraph_index = None
                stats['invalid_positions'] += 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–Ω–∞—á–∏–º–æ–π
                target_para = self.document.paragraphs[image.paragraph_index]
                has_meaningful_content = (target_para.text.strip() or 
                                        any(run._element.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing') for run in target_para.runs))
                
                if has_meaningful_content:
                    print(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é {image.paragraph_index}")
                    stats['valid_positions'] += 1
                else:
                    print(f"‚ö†Ô∏è  –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø—É—Å—Ç–æ–º—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É {image.paragraph_index}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∑–Ω–∞—á–∏–º—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                    corrected_position = self._find_nearest_significant_paragraph(image.paragraph_index, significant_paragraphs)
                    if corrected_position is not None:
                        print(f"üîß –ö–û–†–†–ï–ö–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Å –ø–æ–∑–∏—Ü–∏–∏ {image.paragraph_index} –Ω–∞ {corrected_position}")
                        image.paragraph_index = corrected_position
                        stats['corrected_positions'] += 1
                    else:
                        print(f"‚ùå –ö–û–†–†–ï–ö–¶–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image.image_id}")
                        image.paragraph_index = None
                        stats['invalid_positions'] += 1
            
            # === –≠–¢–ê–ü 2: –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø ===
            if image.paragraph_index is None and original_position is not None:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                corrected_position = self._intelligent_position_correction(original_position, total_paragraphs, significant_paragraphs)
                if corrected_position is not None:
                    print(f"üß† –£–ú–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –ø–æ–ª—É—á–∏–ª–æ –ø–æ–∑–∏—Ü–∏—é {corrected_position} (–±—ã–ª–æ {original_position})")
                    image.paragraph_index = corrected_position
                    stats['corrected_positions'] += 1
            
            corrected_images.append(image)
        
        # === –≠–¢–ê–ü 3: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó –ü–û–ó–ò–¶–ò–ô ===
        images_without_position = [img for img in corrected_images if img.paragraph_index is None]
        
        if images_without_position:
            print(f"üéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(images_without_position)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            distribution_strategy = self._determine_distribution_strategy(len(images_without_position), len(significant_paragraphs))
            print(f"üéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é '{distribution_strategy}'")
            
            if distribution_strategy == 'distribute':
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
                distributed_count = self._distribute_images_intelligently(images_without_position, significant_paragraphs)
                stats['distributed_positions'] += distributed_count
                stats['end_positions'] += len(images_without_position) - distributed_count
            elif distribution_strategy == 'cluster':
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                clustered_count = self._cluster_images_strategically(images_without_position, significant_paragraphs)
                stats['distributed_positions'] += clustered_count
                stats['end_positions'] += len(images_without_position) - clustered_count
            else:
                # –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü (—Ç–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                stats['end_positions'] += len(images_without_position)
        
        # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        print(f"\nüìä –ò–¢–û–ì–ò –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {stats['valid_positions']}")
        print(f"  ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {stats['invalid_positions']}")
        print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {stats['corrected_positions']}")
        print(f"  üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {stats['distributed_positions']}")
        print(f"  üìå –ü–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ: {stats['end_positions']}")
        
        return corrected_images
    
    def _perform_hybrid_validation(self):
        """
        –ì–ò–ë–†–ò–î–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É XML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ python-docx API
        """
        if not self.images or not self.document:
            return
            
        total_paragraphs = len(self.document.paragraphs)
        
        print(f"\nüîç –ì–ò–ë–†–ò–î–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π")
        print(f"üìä Python-docx –≤–∏–¥–∏—Ç: {total_paragraphs} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å XML —Å—Ç–æ—Ä–æ–Ω—ã
        xml_paragraphs_count = None
        if hasattr(self.improved_image_processor, '_last_positions'):
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XML –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏–∑ –ª–æ–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            try:
                import zipfile
                import xml.etree.ElementTree as ET
                
                with zipfile.ZipFile(self.file_path, 'r') as docx_zip:
                    doc_content = docx_zip.read('word/document.xml')
                    root = ET.fromstring(doc_content)
                    body = root.find('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}body')
                    
                    if body is not None:
                        xml_paragraphs = body.findall('.//{http://schemas.openxmlformats.org/wordprocessingml/2006/main}p')
                        xml_paragraphs_count = len(xml_paragraphs)
                        print(f"üìä XML-–ø–∞—Ä—Å–µ—Ä –≤–∏–¥–∏—Ç: {xml_paragraphs_count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XML –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        validation_issues = []
        
        if xml_paragraphs_count is not None:
            if xml_paragraphs_count != total_paragraphs:
                issue = f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: XML={xml_paragraphs_count}, python-docx={total_paragraphs}"
                validation_issues.append(issue)
                print(f"‚ö†Ô∏è  {issue}")
            else:
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {total_paragraphs}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        valid_positions = 0
        invalid_positions = 0
        out_of_range_positions = 0
        
        for image in self.images:
            if image.paragraph_index is None:
                invalid_positions += 1
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id}: –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (None)")
            elif image.paragraph_index < 0:
                invalid_positions += 1
                validation_issues.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é: {image.paragraph_index}")
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {image.paragraph_index}")
            elif image.paragraph_index >= total_paragraphs:
                out_of_range_positions += 1
                validation_issues.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏—é {image.paragraph_index}, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ ({total_paragraphs})")
                print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id}: –ø–æ–∑–∏—Ü–∏—è {image.paragraph_index} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º ({total_paragraphs-1})")
            else:
                valid_positions += 1
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id}: –≤–∞–ª–∏–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {image.paragraph_index}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        total_images = len(self.images)
        success_rate = (valid_positions / total_images * 100) if total_images > 0 else 0
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ò–ë–†–ò–î–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {valid_positions}/{total_images} ({success_rate:.1f}%)")
        print(f"  ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {invalid_positions}")
        print(f"  üö´ –ü–æ–∑–∏—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {out_of_range_positions}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if validation_issues:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ({len(validation_issues)}):")
            for i, issue in enumerate(validation_issues, 1):
                print(f"   {i}. {issue}")
                
            if success_rate < 50:
                print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ {success_rate:.1f}%")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ improved_image_processor.py")
            elif success_rate < 80:
                print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {success_rate:.1f}% –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π")
                print(f"   –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ edge cases")
        else:
            print(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ memory –≤ update_memory tool –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if success_rate < 30 and len(validation_issues) > 3:
            print(f"\nüîß –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            print(f"   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        print(f"‚îÄ" * 60)
    
    def _find_nearest_significant_paragraph(self, target_index: int, significant_paragraphs: List[dict]) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –∑–Ω–∞—á–∏–º—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É"""
        if not significant_paragraphs:
            return None
            
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        best_distance = float('inf')
        best_index = None
        
        for para_info in significant_paragraphs:
            distance = abs(para_info['index'] - target_index)
            if distance < best_distance:
                best_distance = distance
                best_index = para_info['index']
        
        return best_index
    
    def _intelligent_position_correction(self, original_position: int, total_paragraphs: int, significant_paragraphs: List[dict]) -> Optional[int]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not significant_paragraphs:
            return None
            
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
        if original_position >= total_paragraphs:
            proportion = original_position / total_paragraphs
            if proportion <= 2.0:  # –ù–µ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                corrected_index = int((original_position / total_paragraphs) * len(significant_paragraphs))
                if corrected_index < len(significant_paragraphs):
                    return significant_paragraphs[corrected_index]['index']
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–ª–∏–∑–∫–∞ –∫ –∫–æ–Ω—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        if original_position >= total_paragraphs * 0.8:
            last_third = significant_paragraphs[-len(significant_paragraphs)//3:] if len(significant_paragraphs) > 3 else significant_paragraphs
            if last_third:
                return last_third[0]['index']
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        if original_position <= total_paragraphs * 0.2:
            first_third = significant_paragraphs[:len(significant_paragraphs)//3] if len(significant_paragraphs) > 3 else significant_paragraphs
            if first_third:
                return first_third[-1]['index']
        
        return None
    
    def _determine_distribution_strategy(self, images_count: int, paragraphs_count: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π"""
        if images_count <= 2:
            return 'end'  # –ú–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤ –∫–æ–Ω–µ—Ü
        elif images_count <= paragraphs_count // 3:
            return 'distribute'  # –°—Ä–µ–¥–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
        elif images_count <= paragraphs_count // 2:
            return 'cluster'  # –ú–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
        else:
            return 'end'  # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤ –∫–æ–Ω–µ—Ü
    
    def _distribute_images_intelligently(self, images: List[ImageElement], significant_paragraphs: List[dict]) -> int:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        if not images or not significant_paragraphs:
            return 0
            
        distributed_count = 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        step = len(significant_paragraphs) // (len(images) + 1)
        if step < 1:
            step = 1
            
        for i, image in enumerate(images):
            target_position = min((i + 1) * step, len(significant_paragraphs) - 1)
            if target_position < len(significant_paragraphs):
                image.paragraph_index = significant_paragraphs[target_position]['index']
                print(f"üéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ {image.paragraph_index}")
                distributed_count += 1
        
        return distributed_count
    
    def _cluster_images_strategically(self, images: List[ImageElement], significant_paragraphs: List[dict]) -> int:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not images or not significant_paragraphs:
            return 0
            
        clustered_count = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–∞—á–∞–ª–æ, —Å–µ—Ä–µ–¥–∏–Ω–∞, –∫–æ–Ω–µ—Ü)
        cluster_points = []
        if len(significant_paragraphs) > 10:
            cluster_points = [
                significant_paragraphs[len(significant_paragraphs)//4]['index'],  # –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å
                significant_paragraphs[len(significant_paragraphs)//2]['index'],  # –°–µ—Ä–µ–¥–∏–Ω–∞
                significant_paragraphs[3*len(significant_paragraphs)//4]['index']  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å
            ]
        else:
            cluster_points = [
                significant_paragraphs[0]['index'],  # –ù–∞—á–∞–ª–æ
                significant_paragraphs[-1]['index']  # –ö–æ–Ω–µ—Ü
            ]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        for i, image in enumerate(images):
            if i < len(cluster_points):
                image.paragraph_index = cluster_points[i]
                print(f"üéØ –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {image.paragraph_index}")
                clustered_count += 1
        
        return clustered_count

    def extract_text_elements(self) -> List[DocumentElement]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        if not self.document:
            return []
        
        elements = []
        element_index = 0
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        if self.file_path:
            print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–õ–£–ß–®–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–∞: {self.file_path}")
            print(f"üîç DocumentProcessor –≤–∏–¥–∏—Ç {len(self.document.paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–∞–ø –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            self._log_image_processing_stage('extraction', {
                'file_path': self.file_path,
                'total_paragraphs': len(self.document.paragraphs)
            })
            
            image_infos = self.improved_image_processor.extract_images_from_docx(self.file_path)
            self.images = ImageAdapter.convert_list_to_image_elements(image_infos)
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {len(self.images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # === –ì–ò–ë–†–ò–î–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞) ===
            self._perform_hybrid_validation()
            
            # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            self._track_image_positions('extraction', self.images, {'source': 'improved_processor'})
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            self._log_image_processing_stage('extraction', {
                'file_path': self.file_path,
                'total_paragraphs': len(self.document.paragraphs),
                'images_found': len(self.images),
                'relationships_count': len(getattr(self.improved_image_processor, '_last_relationships', {})),
                'xml_positions_count': len(getattr(self.improved_image_processor, '_last_positions', {}))
            })
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –£–õ–£–ß–®–ï–ù–ù–û–ô —Å–∏—Å—Ç–µ–º—ã
            print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–õ–£–ß–®–ï–ù–ù–£–Æ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            pre_validation_stats = {
                'total_images': len(self.images),
                'with_positions': len([img for img in self.images if img.paragraph_index is not None]),
                'without_positions': len([img for img in self.images if img.paragraph_index is None])
            }
            
            self.images = self._validate_and_correct_image_positions(self.images)
            
            # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            self._track_image_positions('validation', self.images, pre_validation_stats)
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            post_validation_stats = {
                'total_images': len(self.images),
                'with_positions': len([img for img in self.images if img.paragraph_index is not None]),
                'without_positions': len([img for img in self.images if img.paragraph_index is None])
            }
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if self.improved_image_processor and hasattr(self.improved_image_processor, 'get_detailed_extraction_log'):
                extraction_log = self.improved_image_processor.get_detailed_extraction_log()
                print(f"\n{extraction_log}\n")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É, –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä!")
            # –ë–µ–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.images = []
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(self.images)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        images_by_paragraph = {}
        images_without_position = []
        positioning_conflicts = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–∑–∏—Ü–∏–π
        for image in self.images:
            if image.paragraph_index is not None and image.paragraph_index >= 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ–∑–∏—Ü–∏–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
                if image.paragraph_index not in images_by_paragraph:
                    images_by_paragraph[image.paragraph_index] = []
                images_by_paragraph[image.paragraph_index].append(image)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                if len(images_by_paragraph[image.paragraph_index]) > 1:
                    positioning_conflicts.append(image.paragraph_index)
                
                print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É {image.paragraph_index}")
            else:
                images_without_position.append(image)
                print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ–∑–∏—Ü–∏–π
        if positioning_conflicts:
            print(f"‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢–´ –ü–û–ó–ò–¶–ò–ô: {len(set(positioning_conflicts))} –ø–æ–∑–∏—Ü–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            for pos in set(positioning_conflicts):
                print(f"   –ü–æ–∑–∏—Ü–∏—è {pos}: {len(images_by_paragraph[pos])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        elements = []
        element_index = 0
        processed_images_count = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        total_text_paragraphs = len([p for p in self.document.paragraphs if p.text.strip()])
        
        print(f"üìä –°–¢–†–ê–¢–ï–ì–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
        print(f"  ‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: {total_text_paragraphs}")
        print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {len(self.images) - len(images_without_position)}")
        print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π: {len(images_without_position)}")
        
        # === –≠–¢–ê–ü 1: –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–†–ê–ì–†–ê–§–û–í –° –ü–†–ò–í–Ø–ó–ê–ù–ù–´–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ===
        for paragraph_index, paragraph in enumerate(self.document.paragraphs):
            # –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            if paragraph_index in images_by_paragraph:
                images_for_paragraph = images_by_paragraph[paragraph_index]
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                images_for_paragraph.sort(key=lambda img: img.image_id)
                
                for image in images_for_paragraph:
                    image_element = DocumentElement(
                        element_type='image',
                        content=f"[IMAGE: {image.image_id}]",
                        original_element=paragraph,
                        index=element_index,
                        image_element=image
                    )
                    elements.append(image_element)
                    element_index += 1
                    processed_images_count += 1
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –ü–ï–†–ï–î –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º {paragraph_index}")
            
            # –ü–û–¢–û–ú –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
            has_text = paragraph.text.strip()
            if has_text:
                element = DocumentElement(
                    element_type='paragraph',
                    content=paragraph.text,
                    original_element=paragraph,
                    index=element_index,
                    style=paragraph.style.name if paragraph.style else None,
                    formatting=self._extract_paragraph_formatting(paragraph)
                )
                elements.append(element)
                element_index += 1
        
        print(f"üìä –û–ë–†–ê–ë–û–¢–ê–ù–û: {processed_images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        
        # === –≠–¢–ê–ü 2: –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ë–ï–ó –ü–û–ó–ò–¶–ò–ô ===
        if images_without_position:
            print(f"üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: {len(images_without_position)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            distribution_strategy = self._determine_smart_distribution_strategy(
                images_without_position, 
                total_text_paragraphs, 
                len(elements)
            )
            
            print(f"üéØ –í–´–ë–†–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {distribution_strategy}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if distribution_strategy == 'strategic_insertion':
                elements = self._insert_images_strategically(elements, images_without_position, element_index)
            elif distribution_strategy == 'proportional_distribution':
                elements = self._distribute_images_proportionally(elements, images_without_position, element_index)
            elif distribution_strategy == 'chapter_clustering':
                elements = self._cluster_images_by_chapters(elements, images_without_position, element_index)
            else:  # 'end_placement'
                elements = self._place_images_at_end(elements, images_without_position, element_index)
        
        # === –≠–¢–ê–ü 3: –û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ë–õ–ò–¶ ===
        for table in self.document.tables:
            table_text = self._extract_table_text(table)
            if table_text.strip():
                element = DocumentElement(
                    element_type='table',
                    content=table_text,
                    original_element=table,
                    index=element_index,
                    formatting=self._extract_table_formatting(table)
                )
                elements.append(element)
                element_index += 1
        
        self.elements = elements
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        positioned_images = len([elem for elem in elements if elem.element_type == 'image' and elem.image_element and elem.image_element.paragraph_index is not None])
        unpositioned_images = len([elem for elem in elements if elem.element_type == 'image' and (not elem.image_element or elem.image_element.paragraph_index is None)])
        text_paragraphs = len([elem for elem in elements if elem.element_type == 'paragraph'])
        tables_count = len([elem for elem in elements if elem.element_type == 'table'])
        
        self._log_image_processing_stage('positioning', {
            'total_elements': len(elements),
            'positioned_images': positioned_images,
            'unpositioned_images': unpositioned_images,
            'text_paragraphs': text_paragraphs,
            'tables_count': tables_count
        })
        
        return elements
    
    def _extract_paragraph_formatting(self, paragraph: Paragraph) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        formatting = {
            'alignment': paragraph.alignment,
            'runs': []
        }
        
        for run in paragraph.runs:
            run_formatting = {
                'text': run.text,
                'bold': run.bold,
                'italic': run.italic,
                'underline': run.underline,
                'font_name': run.font.name,
                'font_size': run.font.size,
                'font_color': run.font.color.rgb if run.font.color.rgb else None
            }
            formatting['runs'].append(run_formatting)
        
        return formatting
    
    def _extract_table_text(self, table: Table) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        text_parts = []
        
        for row in table.rows:
            row_text = []
            for cell in row.cells:
                cell_text = cell.text.strip()
                if cell_text:
                    row_text.append(cell_text)
            
            if row_text:
                text_parts.append(' | '.join(row_text))
        
        return '\n'.join(text_parts)
    
    def _extract_table_formatting(self, table: Table) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        return {
            'rows': len(table.rows),
            'cols': len(table.columns),
            'style': table.style.name if table.style else None
        }
    
    def update_element_content(self, element_index: int, new_content: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        
        Args:
            element_index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
            new_content: –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if element_index >= len(self.elements):
            return False
        
        element = self.elements[element_index]
        
        try:
            if element.element_type == 'paragraph':
                self._update_paragraph_content(element.original_element, new_content)
            elif element.element_type == 'table':
                self._update_table_content(element.original_element, new_content)
            elif element.element_type == 'image':
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
                pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
            element.content = new_content
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ {element_index}: {e}")
            return False
    
    def _update_paragraph_content(self, paragraph: Paragraph, new_content: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ run
        if paragraph.runs:
            first_run = paragraph.runs[0]
            
            # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            paragraph.clear()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π run —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            new_run = paragraph.add_run(new_content)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            new_run.bold = first_run.bold
            new_run.italic = first_run.italic
            new_run.underline = first_run.underline
            if first_run.font.name:
                new_run.font.name = first_run.font.name
            if first_run.font.size:
                new_run.font.size = first_run.font.size
            if first_run.font.color.rgb:
                new_run.font.color.rgb = first_run.font.color.rgb
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç runs, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            paragraph.add_run(new_content)
    
    def _update_table_content(self, table: Table, new_content: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        rows_content = new_content.split('\n')
        
        for row_idx, row in enumerate(table.rows):
            if row_idx < len(rows_content):
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —è—á–µ–π–∫–∏
                cells_content = rows_content[row_idx].split(' | ')
                
                for cell_idx, cell in enumerate(row.cells):
                    if cell_idx < len(cells_content):
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
                        cell.text = cells_content[cell_idx].strip()
    
    def save_document(self, output_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–∞–π–ª
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.document:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_dir = Path(output_path).parent
            output_dir.mkdir(parents=True, exist_ok=True)
            
            self.document.save(output_path)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def save_document_with_images(self, document: Document, output_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ —Ñ–∞–π–ª
        
        Args:
            document: –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_dir = Path(output_path).parent
            output_dir.mkdir(parents=True, exist_ok=True)
            
            document.save(output_path)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {e}")
            return False
    
    def create_translated_document(self, translation_results: List[Any]) -> Optional[Document]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û v2: –°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–∏.
        """
        try:
            new_document = Document()
            EMPTY_PARA_MARKER = "[[EMPTY_PARAGRAPH_MARKER]]"
            
            full_translated_text = '\n\n'.join(
                res.translated_text for res in translation_results if res.success
            )
            
            translated_paragraphs = list(filter(None, re.split(r'\n\s*\n', full_translated_text)))
            translated_paragraph_iterator = iter(translated_paragraphs)

            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(self.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ {len(translated_paragraphs)} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.")

            for element_idx, element in enumerate(self.elements):
                if element.element_type == 'image':
                    if element.image_element:
                        self._insert_image_with_smart_positioning(new_document, element.image_element, element_idx)
                
                elif element.element_type == 'paragraph':
                    if not element.content.strip():
                        new_document.add_paragraph()
                        print(f"üìÑ –ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ (—ç–ª–µ–º–µ–Ω—Ç {element_idx}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–µ—Ä—Å—Ç–∫–∏.")
                    else:
                        try:
                            translated_text = next(translated_paragraph_iterator)
                            if translated_text.strip() and translated_text != EMPTY_PARA_MARKER:
                                self._create_translated_paragraph_with_context(
                                    new_document, element, translated_text, element_idx
                                )
                            else:
                                new_document.add_paragraph()
                        except StopIteration:
                            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ {element_idx}.")
                
                elif element.element_type == 'table':
                    try:
                        translated_text_for_table = next(translated_paragraph_iterator)
                        self._add_translated_table(new_document, translated_text_for_table, element.formatting)
                    except StopIteration:
                        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ {element_idx}.")
            
            remaining_paragraphs = list(translated_paragraph_iterator)
            if remaining_paragraphs:
                print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {len(remaining_paragraphs)} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏. –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü.")
                for rem_para in remaining_paragraphs:
                    new_document.add_paragraph(rem_para)

            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {len(new_document.paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, {len(new_document.inline_shapes)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            return new_document
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            traceback.print_exc()
            return None
    
    def _apply_advanced_formatting(self, paragraph: Paragraph, original_text: str, 
                                 translated_text: str, formatting_data: Dict[str, Any]):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        
        Args:
            paragraph: –ü–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            original_text: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            translated_text: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            formatting_data: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if not formatting_data:
                paragraph.add_run(translated_text)
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            original_segments = self.formatting_processor.extract_formatting_segments(
                original_text, formatting_data
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û–ï —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            translated_segments = self.formatting_processor.map_conservative_formatting_to_translation(
                original_segments, original_text, translated_text
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É
            paragraph_alignment = formatting_data.get('alignment')
            success = self.formatting_processor.apply_formatting_to_paragraph(
                paragraph, translated_segments, paragraph_alignment
            )
            
            if not success:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                paragraph.clear()
                paragraph.add_run(translated_text)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            paragraph.clear()
            paragraph.add_run(translated_text)
    
    def _insert_image_with_smart_positioning(self, document: Document, image_element: ImageElement, element_index: int) -> bool:
        """
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–º–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            document: –¶–µ–ª–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
            image_element: –≠–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            element_index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            positioning_context = self._analyze_image_positioning_context(element_index)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            temp_path = self._get_image_temp_path(image_element)
            if not temp_path:
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if positioning_context['use_existing_paragraph']:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                target_paragraph = positioning_context['target_paragraph']
                success = self._insert_image_into_existing_paragraph(target_paragraph, image_element, temp_path)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                success = self._insert_image_into_new_paragraph(document, image_element, temp_path, positioning_context)
            
            if success:
                print(f"üñºÔ∏è  –£–ú–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_element.image_id} –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{positioning_context['strategy']}'")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_element.image_id}: {e}")
            return False
    
    def _create_translated_paragraph_with_context(self, document: Document, element: DocumentElement, translated_text: str, element_index: int) -> Paragraph:
        """
        –£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            document: –¶–µ–ª–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
            element: –ò—Å—Ö–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            translated_text: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            element_index: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        context = self._analyze_paragraph_context(element_index)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context['needs_spacing_before']:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            spacing_paragraph = document.add_paragraph()
            spacing_paragraph.add_run("")  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        paragraph = document.add_paragraph()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        if element.style:
            try:
                paragraph.style = element.style
            except:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å '{element.style}' –∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._apply_advanced_formatting(
            paragraph, 
            element.content, 
            translated_text, 
            element.formatting
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context['is_title']:
            paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        elif context['is_quote']:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–∏—Ç–∞—Ç
            paragraph.paragraph_format.left_indent = Inches(0.5)
            paragraph.paragraph_format.right_indent = Inches(0.5)
        
        return paragraph
    
    def _analyze_image_positioning_context(self, element_index: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        context = {
            'strategy': 'new_paragraph',
            'use_existing_paragraph': False,
            'target_paragraph': None,
            'needs_spacing': True,
            'alignment': WD_ALIGN_PARAGRAPH.CENTER
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        prev_element = self.elements[element_index - 1] if element_index > 0 else None
        next_element = self.elements[element_index + 1] if element_index < len(self.elements) - 1 else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if prev_element and prev_element.element_type == 'image':
            context['strategy'] = 'image_group'
            context['needs_spacing'] = False
        elif next_element and next_element.element_type == 'image':
            context['strategy'] = 'image_group_start'
            context['needs_spacing'] = True
        else:
            context['strategy'] = 'standalone'
            context['needs_spacing'] = True
        
        return context
    
    def _analyze_paragraph_context(self, element_index: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        context = {
            'needs_spacing_before': False,
            'needs_spacing_after': False,
            'is_title': False,
            'is_quote': False,
            'is_list_item': False
        }
        
        if element_index < len(self.elements):
            current_element = self.elements[element_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            if current_element.style:
                style_name = current_element.style.lower()
                if 'heading' in style_name or 'title' in style_name:
                    context['is_title'] = True
                    context['needs_spacing_before'] = True
                    context['needs_spacing_after'] = True
                elif 'quote' in style_name:
                    context['is_quote'] = True
                    context['needs_spacing_before'] = True
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        prev_element = self.elements[element_index - 1] if element_index > 0 else None
        if prev_element and prev_element.element_type == 'image':
            context['needs_spacing_before'] = True
        
        return context
    
    def _get_image_temp_path(self, image_element: ImageElement) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.improved_image_processor or not self.improved_image_processor.temp_dir:
            return None
            
        temp_path = os.path.join(
            self.improved_image_processor.temp_dir, 
            f"{image_element.image_id}.{image_element.image_format}"
        )
        
        if not os.path.exists(temp_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {temp_path}")
            return None
            
        return temp_path
    
    def _insert_image_into_new_paragraph(self, document: Document, image_element: ImageElement, temp_path: str, context: Dict[str, Any]) -> bool:
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            paragraph = document.add_paragraph()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context.get('alignment'):
                paragraph.alignment = context['alignment']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            success = self._add_image_to_paragraph(paragraph, image_element, temp_path)
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _insert_image_into_existing_paragraph(self, paragraph: Paragraph, image_element: ImageElement, temp_path: str) -> bool:
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ"""
        try:
            return self._add_image_to_paragraph(paragraph, image_element, temp_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: {e}")
            return False
    
    def _add_image_to_paragraph(self, paragraph: Paragraph, image_element: ImageElement, temp_path: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        try:
            run = paragraph.add_run()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            width, height = self._calculate_optimal_image_size(image_element)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if height:
                run.add_picture(temp_path, width=width, height=height)
            else:
                run.add_picture(temp_path, width=width)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ: {e}")
            return False
    
    def _calculate_optimal_image_size(self, image_element: ImageElement) -> Tuple[Inches, Optional[Inches]]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        max_width = 6.0
        max_height = 8.0
        
        if image_element.width and image_element.height:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ –¥—é–π–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image_element.width > 100:  # –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏–∫—Å–µ–ª–∏
                width_inches = image_element.width / 96.0
                height_inches = image_element.height / 96.0
            else:  # –£–∂–µ –≤ –¥—é–π–º–∞—Ö
                width_inches = image_element.width
                height_inches = image_element.height
                
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            if width_inches > max_width:
                scale = max_width / width_inches
                width_inches = max_width
                height_inches = height_inches * scale
                
            if height_inches > max_height:
                scale = max_height / height_inches
                height_inches = max_height
                width_inches = width_inches * scale
                
            return Inches(width_inches), Inches(height_inches)
        else:
            # –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return Inches(4.0), None
    
    def _add_translated_table(self, document: Document, translated_content: str, formatting: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
            rows_content = translated_content.split('\n')
            
            if not rows_content:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            first_row = rows_content[0].split(' | ')
            cols_count = len(first_row)
            rows_count = len(rows_content)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table = document.add_table(rows=rows_count, cols=cols_count)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for row_idx, row_content in enumerate(rows_content):
                cells_content = row_content.split(' | ')
                for col_idx, cell_content in enumerate(cells_content):
                    if col_idx < cols_count:
                        table.cell(row_idx, col_idx).text = cell_content.strip()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
            if formatting and 'style' in formatting and formatting['style']:
                try:
                    table.style = formatting['style']
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∏–ª–µ–π
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def cleanup_temp_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if self.improved_image_processor:
            self.improved_image_processor.cleanup_temp_files()
    
    def save_as_xml(self, output_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ XML —Ñ–æ—Ä–º–∞—Ç–µ
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è XML —Ñ–∞–π–ª–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.elements:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º root —ç–ª–µ–º–µ–Ω—Ç
            root = ET.Element("document")
            
            for element in self.elements:
                elem = ET.SubElement(root, element.element_type)
                elem.set("index", str(element.index))
                
                if element.style:
                    elem.set("style", element.style)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                elem.text = element.content
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if element.formatting:
                    formatting_elem = ET.SubElement(elem, "formatting")
                    for key, value in element.formatting.items():
                        if value is not None:
                            formatting_elem.set(key, str(value))
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            tree = ET.ElementTree(root)
            ET.indent(tree, space="  ", level=0)
            
            output_dir = Path(output_path).parent
            output_dir.mkdir(parents=True, exist_ok=True)
            
            tree.write(output_path, encoding='utf-8', xml_declaration=True)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è XML: {e}")
            return False
    
    def get_document_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not self.elements:
            return {}
        
        total_chars = sum(len(elem.content) for elem in self.elements if elem.element_type != 'image')
        paragraphs = sum(1 for elem in self.elements if elem.element_type == 'paragraph')
        tables = sum(1 for elem in self.elements if elem.element_type == 'table')
        images = sum(1 for elem in self.elements if elem.element_type == 'image')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.improved_image_processor and self.improved_image_processor.images:
            image_stats = self.improved_image_processor.get_image_statistics()
        else:
            image_stats = self.improved_image_processor.get_image_statistics() if self.images else {}
        
        stats = {
            'total_elements': len(self.elements),
            'total_characters': total_chars,
            'paragraphs': paragraphs,
            'tables': tables,
            'images': images,
            'average_element_size': total_chars / (len(self.elements) - images) if (len(self.elements) - images) > 0 else 0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_stats:
            stats.update(image_stats)
        
        return stats
    
    def get_formatting_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not self.elements:
            return {'formatting_complexity': 'none'}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        all_formatting_data = []
        for element in self.elements:
            if element.element_type == 'paragraph' and element.formatting:
                all_formatting_data.append(element.formatting)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatting_summary = self.formatting_processor.create_formatting_summary(all_formatting_data)
        
        return formatting_summary
    
    def get_all_text(self) -> str:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        –≤ –≤–∏–¥–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–∏.
        """
        if not self.elements:
            return ""
        
        EMPTY_PARA_MARKER = "[[EMPTY_PARAGRAPH_MARKER]]"
        
        content_parts = []
        for elem in self.elements:
            if elem.element_type == 'paragraph':
                if not elem.content.strip():
                    content_parts.append(EMPTY_PARA_MARKER)
                else:
                    content_parts.append(elem.content)
            elif elem.element_type == 'table':
                content_parts.append(elem.content)
        
        return '\n\n'.join(content_parts)

    def _log_image_processing_stage(self, stage: str, details: Dict[str, Any]):
        """
        –î–ï–¢–ê–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            stage: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ (extraction, validation, positioning, insertion)
            details: –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        timestamp = __import__('datetime').datetime.now().strftime("%H:%M:%S.%f")[:-3]
        
        print(f"\nüîç [{timestamp}] –≠–¢–ê–ü: {stage.upper()}")
        print("=" * 60)
        
        if stage == 'extraction':
            print(f"üì• –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
            print(f"  ‚Ä¢ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {details.get('file_path', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {details.get('total_paragraphs', 0)}")
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {details.get('images_found', 0)}")
            print(f"  ‚Ä¢ Relationships –Ω–∞–π–¥–µ–Ω–æ: {details.get('relationships_count', 0)}")
            print(f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏–π –≤ XML: {details.get('xml_positions_count', 0)}")
            
        elif stage == 'validation':
            print(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô:")
            print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {details.get('total_images', 0)}")
            print(f"  ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {details.get('valid_positions', 0)}")
            print(f"  ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {details.get('invalid_positions', 0)}")
            print(f"  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {details.get('corrected_positions', 0)}")
            print(f"  ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {details.get('distributed_positions', 0)}")
            print(f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Ü–µ: {details.get('end_positions', 0)}")
            
        elif stage == 'positioning':
            print(f"üìç –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {details.get('total_elements', 0)}")
            print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {details.get('positioned_images', 0)}")
            print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π: {details.get('unpositioned_images', 0)}")
            print(f"  ‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: {details.get('text_paragraphs', 0)}")
            print(f"  ‚Ä¢ –¢–∞–±–ª–∏—Ü: {details.get('tables_count', 0)}")
            
        elif stage == 'insertion':
            print(f"üîÑ –í–°–¢–ê–í–ö–ê –í –ü–ï–†–ï–í–ï–î–ï–ù–ù–´–ô –î–û–ö–£–ú–ï–ù–¢:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {details.get('total_elements', 0)}")
            print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {details.get('images_inserted', 0)}")
            print(f"  ‚Ä¢ –û—à–∏–±–æ–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {details.get('images_failed', 0)}")
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {details.get('paragraphs_processed', 0)}")
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {details.get('tables_processed', 0)}")
            
        elif stage == 'debug_analysis':
            print(f"üêõ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
            if 'image_positions_map' in details:
                print(f"  ‚Ä¢ –ö–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
                for img_id, pos in details['image_positions_map'].items():
                    print(f"    - {img_id}: –ø–æ–∑–∏—Ü–∏—è {pos}")
            
            if 'paragraph_analysis' in details:
                print(f"  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤:")
                for i, para_info in enumerate(details['paragraph_analysis'][:10]):  # –ü–µ—Ä–≤—ã–µ 10
                    print(f"    - –ü–∞—Ä–∞–≥—Ä–∞—Ñ {i}: {para_info}")
                if len(details['paragraph_analysis']) > 10:
                    print(f"    ... –∏ –µ—â–µ {len(details['paragraph_analysis']) - 10} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
        
        print("=" * 60)
        print()
    
    def _determine_smart_distribution_strategy(self, images: List[ImageElement], text_paragraphs: int, current_elements: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π
        
        Args:
            images: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π
            text_paragraphs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            current_elements: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        images_count = len(images)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if images_count <= 2:
            return 'end_placement'  # –ú–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤ –∫–æ–Ω–µ—Ü
        elif images_count <= text_paragraphs // 4:
            return 'strategic_insertion'  # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Å—Ç–∞
        elif images_count <= text_paragraphs // 2:
            return 'proportional_distribution'  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        elif text_paragraphs > 20:
            return 'chapter_clustering'  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        else:
            return 'end_placement'  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤ –∫–æ–Ω–µ—Ü
    
    def _insert_images_strategically(self, elements: List[DocumentElement], images: List[ImageElement], start_index: int) -> List[DocumentElement]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        print(f"üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ê–Ø –í–°–¢–ê–í–ö–ê: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞—á–∞–ª–æ —Ä–∞–∑–¥–µ–ª–æ–≤, –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, etc.)
        strategic_positions = self._find_strategic_positions(elements)
        
        current_index = start_index
        images_inserted = 0
        
        for i, image in enumerate(images):
            if i < len(strategic_positions):
                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é
                position = strategic_positions[i]
                image_element = DocumentElement(
                    element_type='image',
                    content=f"[IMAGE: {image.image_id}]",
                    original_element=None,
                    index=current_index,
                    image_element=image
                )
                elements.insert(position + i, image_element)
                current_index += 1
                images_inserted += 1
                print(f"üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏—é {position + i}")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü
                image_element = DocumentElement(
                    element_type='image',
                    content=f"[IMAGE: {image.image_id}]",
                    original_element=None,
                    index=current_index,
                    image_element=image
                )
                elements.append(image_element)
                current_index += 1
                print(f"üìå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü")
        
        print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {images_inserted} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏")
        return elements
    
    def _distribute_images_proportionally(self, elements: List[DocumentElement], images: List[ImageElement], start_index: int) -> List[DocumentElement]:
        """–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        print(f"üìä –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        text_elements = [i for i, elem in enumerate(elements) if elem.element_type == 'paragraph']
        
        if not text_elements:
            return self._place_images_at_end(elements, images, start_index)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        step = len(text_elements) // (len(images) + 1) if len(images) > 0 else 1
        if step < 1:
            step = 1
        
        current_index = start_index
        
        for i, image in enumerate(images):
            if i * step < len(text_elements):
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                position = text_elements[min(i * step, len(text_elements) - 1)] + 1 + i
                image_element = DocumentElement(
                    element_type='image',
                    content=f"[IMAGE: {image.image_id}]",
                    original_element=None,
                    index=current_index,
                    image_element=image
                )
                if position < len(elements):
                    elements.insert(position, image_element)
                else:
                    elements.append(image_element)
                current_index += 1
                print(f"üìä –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏—é {position}")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü
                image_element = DocumentElement(
                    element_type='image',
                    content=f"[IMAGE: {image.image_id}]",
                    original_element=None,
                    index=current_index,
                    image_element=image
                )
                elements.append(image_element)
                current_index += 1
                print(f"üìå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü")
        
        return elements
    
    def _cluster_images_by_chapters(self, elements: List[DocumentElement], images: List[ImageElement], start_index: int) -> List[DocumentElement]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        print(f"üìö –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –†–ê–ó–î–ï–õ–ê–ú: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –≤ —Ç–µ–∫—Å—Ç–µ)
        chapter_positions = self._find_chapter_boundaries(elements)
        
        if not chapter_positions:
            return self._distribute_images_proportionally(elements, images, start_index)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        images_per_chapter = len(images) // len(chapter_positions)
        remaining_images = len(images) % len(chapter_positions)
        
        current_index = start_index
        image_idx = 0
        
        for chapter_idx, chapter_pos in enumerate(chapter_positions):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            images_for_chapter = images_per_chapter + (1 if chapter_idx < remaining_images else 0)
            
            for i in range(images_for_chapter):
                if image_idx < len(images):
                    image = images[image_idx]
                    image_element = DocumentElement(
                        element_type='image',
                        content=f"[IMAGE: {image.image_id}]",
                        original_element=None,
                        index=current_index,
                        image_element=image
                    )
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∞
                    insert_position = chapter_pos + 1 + i + sum(images_per_chapter + (1 if j < remaining_images else 0) for j in range(chapter_idx))
                    if insert_position < len(elements):
                        elements.insert(insert_position, image_element)
                    else:
                        elements.append(image_element)
                    
                    current_index += 1
                    image_idx += 1
                    print(f"üìö –†–ê–ó–î–ï–õ {chapter_idx + 1}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
        while image_idx < len(images):
            image = images[image_idx]
            image_element = DocumentElement(
                element_type='image',
                content=f"[IMAGE: {image.image_id}]",
                original_element=None,
                index=current_index,
                image_element=image
            )
            elements.append(image_element)
            current_index += 1
            image_idx += 1
            print(f"üìå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü")
        
        return elements
    
    def _place_images_at_end(self, elements: List[DocumentElement], images: List[ImageElement], start_index: int) -> List[DocumentElement]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)"""
        print(f"üìå –†–ê–ó–ú–ï–©–ï–ù–ò–ï –í –ö–û–ù–¶–ï: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        current_index = start_index
        
        for image in images:
            image_element = DocumentElement(
                element_type='image',
                content=f"[IMAGE: {image.image_id}]",
                original_element=None,
                index=current_index,
                image_element=image
            )
            elements.append(image_element)
            current_index += 1
            print(f"üìå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.image_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        return elements
    
    def _find_strategic_positions(self, elements: List[DocumentElement]) -> List[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        positions = []
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ 3-4 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        paragraph_count = 0
        for i, element in enumerate(elements):
            if element.element_type == 'paragraph':
                paragraph_count += 1
                if paragraph_count % 3 == 0:  # –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                    positions.append(i)
        
        return positions[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
    
    def _find_chapter_boundaries(self, elements: List[DocumentElement]) -> List[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        boundaries = []
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–µ 10-15 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        paragraph_count = 0
        for i, element in enumerate(elements):
            if element.element_type == 'paragraph':
                paragraph_count += 1
                if paragraph_count % 12 == 0:  # –ö–∞–∂–¥—ã–µ 12 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                    boundaries.append(i)
        
        return boundaries[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤

    def coordinate_image_processing_components(self) -> Dict[str, Any]:
        """
        –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É ImageAdapter, ImprovedImageProcessor –∏ DocumentProcessor
        
        Returns:
            –û—Ç—á–µ—Ç –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        coordination_report = {
            'timestamp': __import__('datetime').datetime.now().isoformat(),
            'components_status': {},
            'synchronization_issues': [],
            'performance_metrics': {},
            'recommendations': []
        }
        
        print(f"üîÑ –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("=" * 70)
        
        # === –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DocumentProcessor
            doc_status = self._check_document_processor_status()
            coordination_report['components_status']['DocumentProcessor'] = doc_status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ImprovedImageProcessor
            image_proc_status = self._check_improved_image_processor_status()
            coordination_report['components_status']['ImprovedImageProcessor'] = image_proc_status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ImageAdapter
            adapter_status = self._check_image_adapter_status()
            coordination_report['components_status']['ImageAdapter'] = adapter_status
            
            print(f"üìä –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
            print(f"  ‚Ä¢ DocumentProcessor: {doc_status['status']}")
            print(f"  ‚Ä¢ ImprovedImageProcessor: {image_proc_status['status']}")
            print(f"  ‚Ä¢ ImageAdapter: {adapter_status['status']}")
            
        except Exception as e:
            coordination_report['synchronization_issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        
        # === –≠–¢–ê–ü 2: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===
        try:
            sync_result = self._synchronize_component_data()
            coordination_report['synchronization_result'] = sync_result
            
            if sync_result['success']:
                print(f"‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {sync_result['images_synchronized']}")
                print(f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {sync_result['positions_corrected']}")
            else:
                print(f"‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                coordination_report['synchronization_issues'].extend(sync_result['issues'])
                
        except Exception as e:
            coordination_report['synchronization_issues'].append(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        # === –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
        try:
            performance_metrics = self._analyze_performance_metrics()
            coordination_report['performance_metrics'] = performance_metrics
            
            print(f"üìà –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {performance_metrics.get('extraction_time', 'N/A')}")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {performance_metrics.get('validation_time', 'N/A')}")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏: {performance_metrics.get('insertion_time', 'N/A')}")
            print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {performance_metrics.get('positioning_success_rate', 'N/A')}%")
            
        except Exception as e:
            coordination_report['synchronization_issues'].append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        # === –≠–¢–ê–ü 4: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        recommendations = self._generate_coordination_recommendations(coordination_report)
        coordination_report['recommendations'] = recommendations
        
        print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations, 1):
            print(f"  {i}. {rec}")
        
        print("=" * 70)
        
        return coordination_report
    
    def _check_document_processor_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ DocumentProcessor"""
        status = {
            'status': 'healthy',
            'document_loaded': self.document is not None,
            'elements_count': len(self.elements),
            'images_count': len(self.images),
            'file_path': self.file_path,
            'issues': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if not self.document:
            status['issues'].append("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            status['status'] = 'warning'
        
        if not self.elements:
            status['issues'].append("–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            status['status'] = 'warning'
        
        if not self.file_path:
            status['issues'].append("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            status['status'] = 'warning'
        
        return status
    
    def _check_improved_image_processor_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ImprovedImageProcessor"""
        status = {
            'status': 'healthy',
            'temp_dir_exists': False,
            'images_extracted': 0,
            'last_extraction_time': None,
            'issues': []
        }
        
        if self.improved_image_processor:
            status['temp_dir_exists'] = bool(self.improved_image_processor.temp_dir and 
                                           os.path.exists(self.improved_image_processor.temp_dir))
            status['images_extracted'] = len(getattr(self.improved_image_processor, 'images', []))
            
            if not status['temp_dir_exists']:
                status['issues'].append("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                status['status'] = 'warning'
        else:
            status['issues'].append("ImprovedImageProcessor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            status['status'] = 'error'
        
        return status
    
    def _check_image_adapter_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ImageAdapter"""
        status = {
            'status': 'healthy',
            'conversion_available': True,
            'issues': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ ImageAdapter
        try:
            from image_adapter import ImageAdapter
            if not hasattr(ImageAdapter, 'convert_to_image_element'):
                status['issues'].append("–ú–µ—Ç–æ–¥ convert_to_image_element –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                status['status'] = 'error'
            if not hasattr(ImageAdapter, 'convert_list_to_image_elements'):
                status['issues'].append("–ú–µ—Ç–æ–¥ convert_list_to_image_elements –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                status['status'] = 'error'
        except ImportError:
            status['issues'].append("ImageAdapter –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            status['status'] = 'error'
        
        return status
    
    def _synchronize_component_data(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        sync_result = {
            'success': True,
            'images_synchronized': 0,
            'positions_corrected': 0,
            'issues': []
        }
        
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if self.improved_image_processor and hasattr(self.improved_image_processor, 'images'):
                processor_images = self.improved_image_processor.images
                adapter_images = self.images
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if len(processor_images) != len(adapter_images):
                    sync_result['issues'].append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: processor={len(processor_images)}, adapter={len(adapter_images)}")
                    sync_result['success'] = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏–π
                positions_corrected = 0
                for proc_img, adapt_img in zip(processor_images, adapter_images):
                    if proc_img.paragraph_index != adapt_img.paragraph_index:
                        print(f"üîÑ –ö–û–†–†–ï–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {adapt_img.image_id}: {adapt_img.paragraph_index} -> {proc_img.paragraph_index}")
                        adapt_img.paragraph_index = proc_img.paragraph_index
                        positions_corrected += 1
                
                sync_result['images_synchronized'] = len(adapter_images)
                sync_result['positions_corrected'] = positions_corrected
                
        except Exception as e:
            sync_result['issues'].append(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            sync_result['success'] = False
        
        return sync_result
    
    def _analyze_performance_metrics(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        metrics = {
            'extraction_time': 'N/A',
            'validation_time': 'N/A',
            'insertion_time': 'N/A',
            'positioning_success_rate': 0,
            'memory_usage': 'N/A'
        }
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.images:
                positioned_count = len([img for img in self.images if img.paragraph_index is not None])
                metrics['positioning_success_rate'] = round((positioned_count / len(self.images)) * 100, 1)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            import psutil
            process = psutil.Process()
            memory_info = process.memory_info()
            metrics['memory_usage'] = f"{memory_info.rss / 1024 / 1024:.1f} MB"
            
        except Exception as e:
            metrics['analysis_error'] = str(e)
        
        return metrics
    
    def _generate_coordination_recommendations(self, report: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if report['components_status'].get('DocumentProcessor', {}).get('status') != 'healthy':
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ DocumentProcessor –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        if report['components_status'].get('ImprovedImageProcessor', {}).get('status') != 'healthy':
            recommendations.append("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ImprovedImageProcessor –∏ —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É")
        
        if report['components_status'].get('ImageAdapter', {}).get('status') != 'healthy':
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ImageAdapter –∏ –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if report.get('synchronization_result', {}).get('success') == False:
            recommendations.append("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        success_rate = report.get('performance_metrics', {}).get('positioning_success_rate', 0)
        if success_rate < 80:
            recommendations.append(f"–£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—É—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%)")
        
        if not recommendations:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return recommendations 

    def _track_image_positions(self, stage: str, images: List[ImageElement], additional_info: Dict[str, Any] = None):
        """
        –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            stage: –≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ (extraction, validation, positioning, insertion)
            images: –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–µ
        """
        if not self.position_tracker['tracking_enabled']:
            return
            
        timestamp = __import__('datetime').datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        stage_positions = {}
        for image in images:
            stage_positions[image.image_id] = {
                'paragraph_index': image.paragraph_index,
                'image_format': image.image_format,
                'width': image.width,
                'height': image.height,
                'timestamp': timestamp
            }
        
        self.position_tracker[f'{stage}_stage'] = stage_positions
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        history_entry = {
            'timestamp': timestamp,
            'stage': stage,
            'images_count': len(images),
            'positioned_count': len([img for img in images if img.paragraph_index is not None]),
            'unpositioned_count': len([img for img in images if img.paragraph_index is None]),
            'additional_info': additional_info or {}
        }
        
        self.position_tracker['position_history'].append(history_entry)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
        if stage != 'extraction':
            self._log_position_changes(stage, stage_positions)
    
    def _log_position_changes(self, current_stage: str, current_positions: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏"""
        previous_stage_map = {
            'validation': 'extraction',
            'positioning': 'validation', 
            'insertion': 'positioning'
        }
        
        previous_stage = previous_stage_map.get(current_stage)
        if not previous_stage:
            return
            
        previous_positions = self.position_tracker.get(f'{previous_stage}_stage', {})
        
        changes_detected = 0
        for image_id, current_info in current_positions.items():
            if image_id in previous_positions:
                prev_pos = previous_positions[image_id]['paragraph_index']
                curr_pos = current_info['paragraph_index']
                
                if prev_pos != curr_pos:
                    changes_detected += 1
                    print(f"üîÑ –¢–†–ï–ö–ò–ù–ì: {image_id} –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ —ç—Ç–∞–ø–µ {current_stage}: {prev_pos} -> {curr_pos}")
        
        if changes_detected > 0:
            print(f"üìä –¢–†–ï–ö–ò–ù–ì: –ù–∞ —ç—Ç–∞–ø–µ {current_stage} –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {changes_detected}")
    
    def get_position_tracking_report(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Returns:
            –û—Ç—á–µ—Ç –æ —Ç—Ä–µ–∫–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
        """
        report = {
            'tracking_enabled': self.position_tracker['tracking_enabled'],
            'stages_tracked': [],
            'position_stability': {},
            'problematic_images': [],
            'summary': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø
        stages = ['extraction', 'validation', 'positioning', 'insertion']
        for stage in stages:
            stage_key = f'{stage}_stage'
            if stage_key in self.position_tracker and self.position_tracker[stage_key]:
                report['stages_tracked'].append(stage)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
        if len(report['stages_tracked']) > 1:
            report['position_stability'] = self._analyze_position_stability()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report['problematic_images'] = self._identify_problematic_images()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        if self.position_tracker['position_history']:
            latest_entry = self.position_tracker['position_history'][-1]
            report['summary'] = {
                'total_images': latest_entry['images_count'],
                'positioned_images': latest_entry['positioned_count'],
                'unpositioned_images': latest_entry['unpositioned_count'],
                'positioning_success_rate': round((latest_entry['positioned_count'] / latest_entry['images_count']) * 100, 1) if latest_entry['images_count'] > 0 else 0,
                'stages_completed': len(report['stages_tracked']),
                'last_update': latest_entry['timestamp']
            }
        
        return report
    
    def _analyze_position_stability(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏"""
        stability = {
            'stable_images': 0,
            'unstable_images': 0,
            'stability_rate': 0,
            'stage_transitions': {}
        }
        
        stages = ['extraction', 'validation', 'positioning', 'insertion']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        all_image_ids = set()
        for stage in stages:
            stage_positions = self.position_tracker.get(f'{stage}_stage', {})
            all_image_ids.update(stage_positions.keys())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for image_id in all_image_ids:
            positions_across_stages = []
            for stage in stages:
                stage_positions = self.position_tracker.get(f'{stage}_stage', {})
                if image_id in stage_positions:
                    positions_across_stages.append(stage_positions[image_id]['paragraph_index'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            if len(set(positions_across_stages)) == 1:
                stability['stable_images'] += 1
            else:
                stability['unstable_images'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        total_images = stability['stable_images'] + stability['unstable_images']
        if total_images > 0:
            stability['stability_rate'] = round((stability['stable_images'] / total_images) * 100, 1)
        
        return stability
    
    def _identify_problematic_images(self) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        problematic = []
        
        stages = ['extraction', 'validation', 'positioning', 'insertion']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        all_image_ids = set()
        for stage in stages:
            stage_positions = self.position_tracker.get(f'{stage}_stage', {})
            all_image_ids.update(stage_positions.keys())
        
        for image_id in all_image_ids:
            issues = []
            position_history = []
            
            for stage in stages:
                stage_positions = self.position_tracker.get(f'{stage}_stage', {})
                if image_id in stage_positions:
                    pos = stage_positions[image_id]['paragraph_index']
                    position_history.append({'stage': stage, 'position': pos})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    if pos is None:
                        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ {stage}")
                    elif isinstance(pos, int) and pos < 0:
                        issues.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ {stage}: {pos}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            positions = [p['position'] for p in position_history if p['position'] is not None]
            if len(set(positions)) > 2:
                issues.append(f"–ß–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {positions}")
            
            if issues:
                problematic.append({
                    'image_id': image_id,
                    'issues': issues,
                    'position_history': position_history
                })
        
        return problematic
    
    def enable_position_tracking(self):
        """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        self.position_tracker['tracking_enabled'] = True
        print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ")
    
    def disable_position_tracking(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        self.position_tracker['tracking_enabled'] = False
        print("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def clear_position_tracking_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        self.position_tracker = {
            'extraction_stage': {},
            'validation_stage': {},
            'positioning_stage': {},
            'insertion_stage': {},
            'position_history': [],
            'tracking_enabled': self.position_tracker['tracking_enabled']
        }
        print("üóëÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –æ—á–∏—â–µ–Ω–∞")

    def run_comprehensive_image_positioning_test(self, test_document_path: str = None) -> Dict[str, Any]:
        """
        –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            test_document_path: –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        test_results = {
            'timestamp': __import__('datetime').datetime.now().isoformat(),
            'test_document': test_document_path or self.file_path,
            'system_components': {},
            'position_accuracy': {},
            'performance_metrics': {},
            'issues_found': [],
            'recommendations': [],
            'overall_success': False
        }
        
        print(f"üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 80)
        
        try:
            # === –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
            print(f"üìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
            components_report = self.coordinate_image_processing_components()
            test_results['system_components'] = components_report
            
            if any(status.get('status') != 'healthy' for status in components_report['components_status'].values()):
                test_results['issues_found'].append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã")
            else:
                print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === –¢–ï–°–¢ 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø ===
            print(f"\nüìã –¢–ï–°–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if test_document_path and test_document_path != self.file_path:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                if self.load_document(test_document_path):
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {test_document_path}")
                else:
                    test_results['issues_found'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {test_document_path}")
                    return test_results
            
            if self.document:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                elements = self.extract_text_elements()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                positioning_report = self.get_position_tracking_report()
                test_results['position_accuracy'] = positioning_report
                
                success_rate = positioning_report.get('summary', {}).get('positioning_success_rate', 0)
                print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate}%")
                
                if success_rate < 70:
                    test_results['issues_found'].append(f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate}%")
                elif success_rate >= 90:
                    print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                else:
                    print("‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # === –¢–ï–°–¢ 3: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
            print(f"\nüìã –¢–ï–°–¢ 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            import time
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            mock_translation_results = self._create_mock_translation_results()
            translated_doc = self.create_translated_document(mock_translation_results)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            performance_metrics = {
                'total_processing_time': round(processing_time, 2),
                'images_processed': len(self.images),
                'elements_processed': len(self.elements),
                'processing_speed': round(len(self.elements) / processing_time, 2) if processing_time > 0 else 0
            }
            
            test_results['performance_metrics'] = performance_metrics
            print(f"üìà –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            print(f"üìà –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {performance_metrics['processing_speed']:.2f} —ç–ª–µ–º–µ–Ω—Ç–æ–≤/—Å–µ–∫")
            
            if translated_doc:
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                test_results['issues_found'].append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            
            # === –¢–ï–°–¢ 4: –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
            print(f"\nüìã –¢–ï–°–¢ 4: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            stress_test_results = self._run_stress_test()
            test_results['stress_test'] = stress_test_results
            
            if stress_test_results['success']:
                print("‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                test_results['issues_found'].append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            
            # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê ===
            test_results['overall_success'] = len(test_results['issues_found']) == 0
            
            if test_results['overall_success']:
                print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                test_results['recommendations'].append("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            else:
                print(f"\n‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´:")
                for issue in test_results['issues_found']:
                    print(f"  ‚ùå {issue}")
                test_results['recommendations'].append("–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
            
            print("=" * 80)
            
        except Exception as e:
            test_results['issues_found'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            test_results['overall_success'] = False
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return test_results
    
    def _create_mock_translation_results(self) -> List[Any]:
        """–°–æ–∑–¥–∞–µ—Ç mock-–æ–±—ä–µ–∫—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        from types import SimpleNamespace
        
        mock_results = []
        for element in self.elements:
            if element.element_type in ['paragraph', 'table']:
                mock_result = SimpleNamespace()
                mock_result.success = True
                mock_result.translated_text = f"[–¢–ï–°–¢] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {element.index}"
                mock_results.append(mock_result)
        
        return mock_results
    
    def _run_stress_test(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        stress_results = {
            'success': True,
            'iterations_completed': 0,
            'max_iterations': 5,
            'errors_encountered': [],
            'performance_degradation': False
        }
        
        try:
            initial_time = None
            
            for i in range(stress_results['max_iterations']):
                start_time = time.time()
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                if self.file_path:
                    image_infos = self.improved_image_processor.extract_images_from_docx(self.file_path)
                    test_images = ImageAdapter.convert_list_to_image_elements(image_infos)
                    validated_images = self._validate_and_correct_image_positions(test_images)
                
                end_time = time.time()
                iteration_time = end_time - start_time
                
                if initial_time is None:
                    initial_time = iteration_time
                elif iteration_time > initial_time * 2:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –≤ 2 —Ä–∞–∑–∞
                    stress_results['performance_degradation'] = True
                
                stress_results['iterations_completed'] += 1
                print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{stress_results['max_iterations']}: {iteration_time:.2f} —Å–µ–∫")
                
        except Exception as e:
            stress_results['errors_encountered'].append(str(e))
            stress_results['success'] = False
        
        return stress_results