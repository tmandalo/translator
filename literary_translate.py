#!/usr/bin/env python3
"""
–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ .docx –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
"""

import sys
import os
import argparse
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import config
from document_processor import DocumentProcessor
from text_chunker import TextChunker
from translator import DocumentTranslator
from logger_config import setup_logging, TranslationProgress, TranslationLogger


def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ .docx –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python literary_translate.py input.docx
  python literary_translate.py input.docx --xml
  python literary_translate.py input.docx --chunk-size 1500
  python literary_translate.py input.docx --log-level DEBUG
        """
    )
    
    parser.add_argument(
        'input_file',
        nargs='?',
        help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É .docx —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--xml',
        action='store_true',
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ XML —Ñ–æ—Ä–º–∞—Ç–µ'
    )
    
    parser.add_argument(
        '--chunk-size',
        type=int,
        default=config.chunk_size,
        help=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.chunk_size})'
    )
    
    parser.add_argument(
        '--log-level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        default=config.log_level,
        help=f'–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.log_level})'
    )
    
    parser.add_argument(
        '--test-api',
        action='store_true',
        help='–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –≤—ã–π—Ç–∏'
    )
    
    return parser.parse_args()


def generate_output_filename(input_file: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ"""
    input_path = Path(input_file)
    # –°–æ–∑–¥–∞–µ–º –∏–º—è: translated_original_name.docx
    output_name = f"translated_{input_path.stem}.docx"
    output_path = input_path.parent / output_name
    return str(output_path)


def validate_input_file(input_file: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    input_path = Path(input_file)
    
    if not input_path.exists():
        print(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return False
    
    if not input_path.is_file():
        print(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {input_file}")
        return False
    
    if input_path.suffix.lower() != '.docx':
        print(f"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã. –ü–æ–ª—É—á–µ–Ω: {input_path.suffix}")
        return False
    
    return True


def validate_output_file(output_file: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    output_path = Path(output_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞
    output_dir = output_path.parent
    try:
        output_dir.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    return True


def test_api_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    try:
        translator = DocumentTranslator()
        if translator.api_translator.test_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenRouter API")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(args.log_level)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = TranslationLogger()
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API
    if args.test_api:
        sys.exit(0 if test_api_connection() else 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not args.input_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not validate_input_file(args.input_file):
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file = generate_output_filename(args.input_file)
    
    if not validate_output_file(output_file):
        sys.exit(1)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    logger.log_start(args.input_file, output_file)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        doc_processor = DocumentProcessor()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        if not doc_processor.load_document(args.input_file):
            logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            sys.exit(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        elements = doc_processor.extract_text_elements()
        
        if not elements:
            logger.log_error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            sys.exit(1)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_stats = doc_processor.get_document_statistics()
        logger.log_document_stats(doc_stats)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatting_stats = doc_processor.get_formatting_statistics()
        if formatting_stats.get('total_elements', 0) > 0:
            logger.logger.info("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:")
            logger.logger.info(f"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {formatting_stats.get('overall_complexity', 'unknown')}")
            logger.logger.info(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {formatting_stats.get('total_elements', 0)}")
            logger.logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ runs: {formatting_stats.get('average_runs_per_element', 0):.1f}")
            
            if formatting_stats.get('elements_with_bold', 0) > 0:
                logger.logger.info(f"   ‚Ä¢ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç: {formatting_stats.get('elements_with_bold', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if formatting_stats.get('elements_with_italic', 0) > 0:
                logger.logger.info(f"   ‚Ä¢ –ö—É—Ä—Å–∏–≤: {formatting_stats.get('elements_with_italic', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if formatting_stats.get('elements_with_underline', 0) > 0:
                logger.logger.info(f"   ‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: {formatting_stats.get('elements_with_underline', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if formatting_stats.get('unique_fonts', 0) > 1:
                logger.logger.info(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {formatting_stats.get('unique_fonts', 0)}")
            if formatting_stats.get('unique_font_sizes', 0) > 1:
                logger.logger.info(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤: {formatting_stats.get('unique_font_sizes', 0)}")
            if formatting_stats.get('unique_colors', 0) > 0:
                logger.logger.info(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {formatting_stats.get('unique_colors', 0)}")
        else:
            logger.logger.info("üìù –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º chunker –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        chunker = TextChunker(max_chunk_size=args.chunk_size)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        full_text = doc_processor.get_all_text()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏
        chunks = chunker.chunk_text(full_text)
        
        if not chunks:
            logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏")
            sys.exit(1)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–æ–≤
        chunk_stats = chunker.get_chunk_statistics(chunks)
        logger.log_chunk_stats(chunk_stats)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        logger.logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫")
        translator = DocumentTranslator()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–ª–æ–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with TranslationProgress(len(chunks)) as progress:
            translation_results = translator.translate_document_chunks(
                chunks,
                progress_callback=progress.update
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not translation_results:
            logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
            sys.exit(1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_stats = translator.api_translator.get_translation_statistics(translation_results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with TranslationProgress(len(chunks)) as progress:
            progress.show_summary(translation_stats)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –±–ª–æ–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        successful_translations = [r for r in translation_results if r.success]
        
        if len(successful_translations) == 0:
            logger.log_error("–ù–∏ –æ–¥–∏–Ω –±–ª–æ–∫ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        try:
            new_document = doc_processor.create_translated_document(successful_translations)
            
            if not new_document:
                logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
                sys.exit(1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            if not doc_processor.save_document_with_images(new_document, output_file):
                logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
                sys.exit(1)
                
        except Exception as e:
            logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {str(e)}")
            sys.exit(1)
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            doc_processor.cleanup_temp_files()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º XML —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        xml_file = None
        if args.xml:
            xml_file = str(Path(output_file).with_suffix('.xml'))
            if not doc_processor.save_as_xml(xml_file):
                logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å XML —Ñ–∞–π–ª")
                xml_file = None
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.log_success(output_file, xml_file)
        
    except KeyboardInterrupt:
        logger.log_error("–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main() 